import 'package:flutter/widgets.dart';
import 'outlined.dart';
import 'variant.dart';
import 'styler.dart';

/// A powerful widget that builds upon
/// the familiar Flutter Text widget,
/// offering additional functionalities
/// for a richer text display experience.
class WxText extends OutlinedText {
  /// Create an extended text widget
  const WxText(
    super.text, {
    super.key,
    TextStyle? style,
    super.strutStyle,
    super.textAlign,
    super.textDirection,
    super.textScaler,
    super.locale,
    super.softWrap,
    super.overflow,
    super.maxLines,
    super.minLines,
    super.minLinesDebugColor,
    super.semanticsLabel,
    super.textWidthBasis,
    super.textHeightBehavior,
    super.selectionColor,
    super.highlight,
    super.highlightStyle,
    super.highlightOnTap,
    super.filter,
    super.filterDisabled,
    super.filterCaseSensitive,
    super.filterMultiLine,
    super.filterUnicode,
    super.filterDotAll,
    super.outlineColor,
    super.outlineWidth,
    super.outlineOffset,
    super.outlineBehind,
    super.gradient,
    this.variant,
    this.color,
    this.backgroundColor,
    this.shadows,
    this.fontFamily,
    this.fontSize,
    this.fontWeight,
    this.fontStyle,
    this.letterSpacing,
    this.wordSpacing,
    this.textBaseline,
    this.height,
  }) : styleOverridden = style;

  /// Create an extended text widget from other instance
  WxText.from(
    WxText other, {
    super.key,
    String? text,
    int? maxLines,
    TextOverflow? overflow,
    bool? filterDisabled,
  })  : styleOverridden = other.styleOverridden,
        variant = other.variant,
        color = other.color,
        backgroundColor = other.backgroundColor,
        shadows = other.shadows,
        fontFamily = other.fontFamily,
        fontSize = other.fontSize,
        fontWeight = other.fontWeight,
        fontStyle = other.fontStyle,
        letterSpacing = other.letterSpacing,
        wordSpacing = other.wordSpacing,
        textBaseline = other.textBaseline,
        height = other.height,
        super(
          text ?? other.text,
          strutStyle: other.strutStyle,
          textAlign: other.textAlign,
          textDirection: other.textDirection,
          textScaler: other.textScaler,
          locale: other.locale,
          softWrap: other.softWrap,
          overflow: overflow ?? other.overflow,
          maxLines: maxLines == -1 ? null : (maxLines ?? other.maxLines),
          minLines: other.minLines,
          minLinesDebugColor: other.minLinesDebugColor,
          semanticsLabel: other.semanticsLabel,
          textWidthBasis: other.textWidthBasis,
          textHeightBehavior: other.textHeightBehavior,
          selectionColor: other.selectionColor,
          highlight: other.highlight,
          highlightStyle: other.highlightStyle,
          highlightOnTap: other.highlightOnTap,
          filter: other.filter,
          filterDisabled: filterDisabled ?? other.filterDisabled,
          filterCaseSensitive: other.caseSensitive,
          filterMultiLine: other.multiLine,
          filterUnicode: other.unicode,
          filterDotAll: other.dotAll,
          outlineColor: other.outlineColor,
          outlineWidth: other.outlineWidth,
          outlineOffset: other.outlineOffset,
          outlineBehind: other.outlineBehind,
          gradient: other.gradient,
        );

  /// Create a large display text widget
  const WxText.displayLarge(
    super.text, {
    super.key,
    TextStyle? style,
    super.strutStyle,
    super.textAlign,
    super.textDirection,
    super.textScaler,
    super.locale,
    super.softWrap,
    super.overflow,
    super.maxLines,
    super.minLines,
    super.minLinesDebugColor,
    super.semanticsLabel,
    super.textWidthBasis,
    super.textHeightBehavior,
    super.selectionColor,
    super.highlight,
    super.highlightStyle,
    super.highlightOnTap,
    super.filter,
    super.filterDisabled,
    super.filterCaseSensitive,
    super.filterMultiLine,
    super.filterUnicode,
    super.filterDotAll,
    super.outlineColor,
    super.outlineWidth,
    super.outlineOffset,
    super.outlineBehind,
    super.gradient,
    this.color,
    this.backgroundColor,
    this.shadows,
    this.fontFamily,
    this.fontSize,
    this.fontWeight,
    this.fontStyle,
    this.letterSpacing,
    this.wordSpacing,
    this.textBaseline,
    this.height,
  })  : styleOverridden = style,
        variant = WxTextVariant.displayLarge;

  /// Create a medium display text widget
  const WxText.displayMedium(
    super.text, {
    super.key,
    TextStyle? style,
    super.strutStyle,
    super.textAlign,
    super.textDirection,
    super.textScaler,
    super.locale,
    super.softWrap,
    super.overflow,
    super.maxLines,
    super.minLines,
    super.minLinesDebugColor,
    super.semanticsLabel,
    super.textWidthBasis,
    super.textHeightBehavior,
    super.selectionColor,
    super.highlight,
    super.highlightStyle,
    super.highlightOnTap,
    super.filter,
    super.filterDisabled,
    super.filterCaseSensitive,
    super.filterMultiLine,
    super.filterUnicode,
    super.filterDotAll,
    super.outlineColor,
    super.outlineWidth,
    super.outlineOffset,
    super.outlineBehind,
    super.gradient,
    this.color,
    this.backgroundColor,
    this.shadows,
    this.fontFamily,
    this.fontSize,
    this.fontWeight,
    this.fontStyle,
    this.letterSpacing,
    this.wordSpacing,
    this.textBaseline,
    this.height,
  })  : styleOverridden = style,
        variant = WxTextVariant.displayMedium;

  /// Create a small display text widget
  const WxText.displaySmall(
    super.text, {
    super.key,
    TextStyle? style,
    super.strutStyle,
    super.textAlign,
    super.textDirection,
    super.textScaler,
    super.locale,
    super.softWrap,
    super.overflow,
    super.maxLines,
    super.minLines,
    super.minLinesDebugColor,
    super.semanticsLabel,
    super.textWidthBasis,
    super.textHeightBehavior,
    super.selectionColor,
    super.highlight,
    super.highlightStyle,
    super.highlightOnTap,
    super.filter,
    super.filterDisabled,
    super.filterCaseSensitive,
    super.filterMultiLine,
    super.filterUnicode,
    super.filterDotAll,
    super.outlineColor,
    super.outlineWidth,
    super.outlineOffset,
    super.outlineBehind,
    super.gradient,
    this.color,
    this.backgroundColor,
    this.shadows,
    this.fontFamily,
    this.fontSize,
    this.fontWeight,
    this.fontStyle,
    this.letterSpacing,
    this.wordSpacing,
    this.textBaseline,
    this.height,
  })  : styleOverridden = style,
        variant = WxTextVariant.displaySmall;

  /// Create a large headline text widget
  const WxText.headlineLarge(
    super.text, {
    super.key,
    TextStyle? style,
    super.strutStyle,
    super.textAlign,
    super.textDirection,
    super.textScaler,
    super.locale,
    super.softWrap,
    super.overflow,
    super.maxLines,
    super.minLines,
    super.minLinesDebugColor,
    super.semanticsLabel,
    super.textWidthBasis,
    super.textHeightBehavior,
    super.selectionColor,
    super.highlight,
    super.highlightStyle,
    super.highlightOnTap,
    super.filter,
    super.filterDisabled,
    super.filterCaseSensitive,
    super.filterMultiLine,
    super.filterUnicode,
    super.filterDotAll,
    super.outlineColor,
    super.outlineWidth,
    super.outlineOffset,
    super.outlineBehind,
    super.gradient,
    this.color,
    this.backgroundColor,
    this.shadows,
    this.fontFamily,
    this.fontSize,
    this.fontWeight,
    this.fontStyle,
    this.letterSpacing,
    this.wordSpacing,
    this.textBaseline,
    this.height,
  })  : styleOverridden = style,
        variant = WxTextVariant.headlineLarge;

  /// Create a medium headline text widget
  const WxText.headlineMedium(
    super.text, {
    super.key,
    TextStyle? style,
    super.strutStyle,
    super.textAlign,
    super.textDirection,
    super.textScaler,
    super.locale,
    super.softWrap,
    super.overflow,
    super.maxLines,
    super.minLines,
    super.minLinesDebugColor,
    super.semanticsLabel,
    super.textWidthBasis,
    super.textHeightBehavior,
    super.selectionColor,
    super.highlight,
    super.highlightStyle,
    super.highlightOnTap,
    super.filter,
    super.filterDisabled,
    super.filterCaseSensitive,
    super.filterMultiLine,
    super.filterUnicode,
    super.filterDotAll,
    super.outlineColor,
    super.outlineWidth,
    super.outlineOffset,
    super.outlineBehind,
    super.gradient,
    this.color,
    this.backgroundColor,
    this.shadows,
    this.fontFamily,
    this.fontSize,
    this.fontWeight,
    this.fontStyle,
    this.letterSpacing,
    this.wordSpacing,
    this.textBaseline,
    this.height,
  })  : styleOverridden = style,
        variant = WxTextVariant.headlineMedium;

  /// Create a small headline text widget
  const WxText.headlineSmall(
    super.text, {
    super.key,
    TextStyle? style,
    super.strutStyle,
    super.textAlign,
    super.textDirection,
    super.textScaler,
    super.locale,
    super.softWrap,
    super.overflow,
    super.maxLines,
    super.minLines,
    super.minLinesDebugColor,
    super.semanticsLabel,
    super.textWidthBasis,
    super.textHeightBehavior,
    super.selectionColor,
    super.highlight,
    super.highlightStyle,
    super.highlightOnTap,
    super.filter,
    super.filterDisabled,
    super.filterCaseSensitive,
    super.filterMultiLine,
    super.filterUnicode,
    super.filterDotAll,
    super.outlineColor,
    super.outlineWidth,
    super.outlineOffset,
    super.outlineBehind,
    super.gradient,
    this.color,
    this.backgroundColor,
    this.shadows,
    this.fontFamily,
    this.fontSize,
    this.fontWeight,
    this.fontStyle,
    this.letterSpacing,
    this.wordSpacing,
    this.textBaseline,
    this.height,
  })  : styleOverridden = style,
        variant = WxTextVariant.headlineSmall;

  /// Create a large body text widget
  const WxText.bodyLarge(
    super.text, {
    super.key,
    TextStyle? style,
    super.strutStyle,
    super.textAlign,
    super.textDirection,
    super.textScaler,
    super.locale,
    super.softWrap,
    super.overflow,
    super.maxLines,
    super.minLines,
    super.minLinesDebugColor,
    super.semanticsLabel,
    super.textWidthBasis,
    super.textHeightBehavior,
    super.selectionColor,
    super.highlight,
    super.highlightStyle,
    super.highlightOnTap,
    super.filter,
    super.filterDisabled,
    super.filterCaseSensitive,
    super.filterMultiLine,
    super.filterUnicode,
    super.filterDotAll,
    super.outlineColor,
    super.outlineWidth,
    super.outlineOffset,
    super.outlineBehind,
    super.gradient,
    this.color,
    this.backgroundColor,
    this.shadows,
    this.fontFamily,
    this.fontSize,
    this.fontWeight,
    this.fontStyle,
    this.letterSpacing,
    this.wordSpacing,
    this.textBaseline,
    this.height,
  })  : styleOverridden = style,
        variant = WxTextVariant.bodyLarge;

  /// Create a medium body text widget
  const WxText.bodyMedium(
    super.text, {
    super.key,
    TextStyle? style,
    super.strutStyle,
    super.textAlign,
    super.textDirection,
    super.textScaler,
    super.locale,
    super.softWrap,
    super.overflow,
    super.maxLines,
    super.minLines,
    super.minLinesDebugColor,
    super.semanticsLabel,
    super.textWidthBasis,
    super.textHeightBehavior,
    super.selectionColor,
    super.highlight,
    super.highlightStyle,
    super.highlightOnTap,
    super.filter,
    super.filterDisabled,
    super.filterCaseSensitive,
    super.filterMultiLine,
    super.filterUnicode,
    super.filterDotAll,
    super.outlineColor,
    super.outlineWidth,
    super.outlineOffset,
    super.outlineBehind,
    super.gradient,
    this.color,
    this.backgroundColor,
    this.shadows,
    this.fontFamily,
    this.fontSize,
    this.fontWeight,
    this.fontStyle,
    this.letterSpacing,
    this.wordSpacing,
    this.textBaseline,
    this.height,
  })  : styleOverridden = style,
        variant = WxTextVariant.bodyMedium;

  /// Create a small body text widget
  const WxText.bodySmall(
    super.text, {
    super.key,
    TextStyle? style,
    super.strutStyle,
    super.textAlign,
    super.textDirection,
    super.textScaler,
    super.locale,
    super.softWrap,
    super.overflow,
    super.maxLines,
    super.minLines,
    super.minLinesDebugColor,
    super.semanticsLabel,
    super.textWidthBasis,
    super.textHeightBehavior,
    super.selectionColor,
    super.highlight,
    super.highlightStyle,
    super.highlightOnTap,
    super.filter,
    super.filterDisabled,
    super.filterCaseSensitive,
    super.filterMultiLine,
    super.filterUnicode,
    super.filterDotAll,
    super.outlineColor,
    super.outlineWidth,
    super.outlineOffset,
    super.outlineBehind,
    super.gradient,
    this.color,
    this.backgroundColor,
    this.shadows,
    this.fontFamily,
    this.fontSize,
    this.fontWeight,
    this.fontStyle,
    this.letterSpacing,
    this.wordSpacing,
    this.textBaseline,
    this.height,
  })  : styleOverridden = style,
        variant = WxTextVariant.bodySmall;

  /// Create a large label text widget
  const WxText.labelLarge(
    super.text, {
    super.key,
    TextStyle? style,
    super.strutStyle,
    super.textAlign,
    super.textDirection,
    super.textScaler,
    super.locale,
    super.softWrap,
    super.overflow,
    super.maxLines,
    super.minLines,
    super.minLinesDebugColor,
    super.semanticsLabel,
    super.textWidthBasis,
    super.textHeightBehavior,
    super.selectionColor,
    super.highlight,
    super.highlightStyle,
    super.highlightOnTap,
    super.filter,
    super.filterDisabled,
    super.filterCaseSensitive,
    super.filterMultiLine,
    super.filterUnicode,
    super.filterDotAll,
    super.outlineColor,
    super.outlineWidth,
    super.outlineOffset,
    super.outlineBehind,
    super.gradient,
    this.color,
    this.backgroundColor,
    this.shadows,
    this.fontFamily,
    this.fontSize,
    this.fontWeight,
    this.fontStyle,
    this.letterSpacing,
    this.wordSpacing,
    this.textBaseline,
    this.height,
  })  : styleOverridden = style,
        variant = WxTextVariant.labelLarge;

  /// Create a medium label text widget
  const WxText.labelMedium(
    super.text, {
    super.key,
    TextStyle? style,
    super.strutStyle,
    super.textAlign,
    super.textDirection,
    super.textScaler,
    super.locale,
    super.softWrap,
    super.overflow,
    super.maxLines,
    super.minLines,
    super.minLinesDebugColor,
    super.semanticsLabel,
    super.textWidthBasis,
    super.textHeightBehavior,
    super.selectionColor,
    super.highlight,
    super.highlightStyle,
    super.highlightOnTap,
    super.filter,
    super.filterDisabled,
    super.filterCaseSensitive,
    super.filterMultiLine,
    super.filterUnicode,
    super.filterDotAll,
    super.outlineColor,
    super.outlineWidth,
    super.outlineOffset,
    super.outlineBehind,
    super.gradient,
    this.color,
    this.backgroundColor,
    this.shadows,
    this.fontFamily,
    this.fontSize,
    this.fontWeight,
    this.fontStyle,
    this.letterSpacing,
    this.wordSpacing,
    this.textBaseline,
    this.height,
  })  : styleOverridden = style,
        variant = WxTextVariant.labelMedium;

  /// Create a small label text widget
  const WxText.labelSmall(
    super.text, {
    super.key,
    TextStyle? style,
    super.strutStyle,
    super.textAlign,
    super.textDirection,
    super.textScaler,
    super.locale,
    super.softWrap,
    super.overflow,
    super.maxLines,
    super.minLines,
    super.minLinesDebugColor,
    super.semanticsLabel,
    super.textWidthBasis,
    super.textHeightBehavior,
    super.selectionColor,
    super.highlight,
    super.highlightStyle,
    super.highlightOnTap,
    super.filter,
    super.filterDisabled,
    super.filterCaseSensitive,
    super.filterMultiLine,
    super.filterUnicode,
    super.filterDotAll,
    super.outlineColor,
    super.outlineWidth,
    super.outlineOffset,
    super.outlineBehind,
    super.gradient,
    this.color,
    this.backgroundColor,
    this.shadows,
    this.fontFamily,
    this.fontSize,
    this.fontWeight,
    this.fontStyle,
    this.letterSpacing,
    this.wordSpacing,
    this.textBaseline,
    this.height,
  })  : styleOverridden = style,
        variant = WxTextVariant.labelSmall;

  /// Create a large title text widget
  const WxText.titleLarge(
    super.text, {
    super.key,
    TextStyle? style,
    super.strutStyle,
    super.textAlign,
    super.textDirection,
    super.textScaler,
    super.locale,
    super.softWrap,
    super.overflow,
    super.maxLines,
    super.minLines,
    super.minLinesDebugColor,
    super.semanticsLabel,
    super.textWidthBasis,
    super.textHeightBehavior,
    super.selectionColor,
    super.highlight,
    super.highlightStyle,
    super.highlightOnTap,
    super.filter,
    super.filterDisabled,
    super.filterCaseSensitive,
    super.filterMultiLine,
    super.filterUnicode,
    super.filterDotAll,
    super.outlineColor,
    super.outlineWidth,
    super.outlineOffset,
    super.outlineBehind,
    super.gradient,
    this.color,
    this.backgroundColor,
    this.shadows,
    this.fontFamily,
    this.fontSize,
    this.fontWeight,
    this.fontStyle,
    this.letterSpacing,
    this.wordSpacing,
    this.textBaseline,
    this.height,
  })  : styleOverridden = style,
        variant = WxTextVariant.titleLarge;

  /// Create a medium title text widget
  const WxText.titleMedium(
    super.text, {
    super.key,
    TextStyle? style,
    super.strutStyle,
    super.textAlign,
    super.textDirection,
    super.textScaler,
    super.locale,
    super.softWrap,
    super.overflow,
    super.maxLines,
    super.minLines,
    super.minLinesDebugColor,
    super.semanticsLabel,
    super.textWidthBasis,
    super.textHeightBehavior,
    super.selectionColor,
    super.highlight,
    super.highlightStyle,
    super.highlightOnTap,
    super.filter,
    super.filterDisabled,
    super.filterCaseSensitive,
    super.filterMultiLine,
    super.filterUnicode,
    super.filterDotAll,
    super.outlineColor,
    super.outlineWidth,
    super.outlineOffset,
    super.outlineBehind,
    super.gradient,
    this.color,
    this.backgroundColor,
    this.shadows,
    this.fontFamily,
    this.fontSize,
    this.fontWeight,
    this.fontStyle,
    this.letterSpacing,
    this.wordSpacing,
    this.textBaseline,
    this.height,
  })  : styleOverridden = style,
        variant = WxTextVariant.titleMedium;

  /// Create a small title text widget
  const WxText.titleSmall(
    super.text, {
    super.key,
    TextStyle? style,
    super.strutStyle,
    super.textAlign,
    super.textDirection,
    super.textScaler,
    super.locale,
    super.softWrap,
    super.overflow,
    super.maxLines,
    super.minLines,
    super.minLinesDebugColor,
    super.semanticsLabel,
    super.textWidthBasis,
    super.textHeightBehavior,
    super.selectionColor,
    super.highlight,
    super.highlightStyle,
    super.highlightOnTap,
    super.filter,
    super.filterDisabled,
    super.filterCaseSensitive,
    super.filterMultiLine,
    super.filterUnicode,
    super.filterDotAll,
    super.outlineColor,
    super.outlineWidth,
    super.outlineOffset,
    super.outlineBehind,
    super.gradient,
    this.color,
    this.backgroundColor,
    this.shadows,
    this.fontFamily,
    this.fontSize,
    this.fontWeight,
    this.fontStyle,
    this.letterSpacing,
    this.wordSpacing,
    this.textBaseline,
    this.height,
  })  : styleOverridden = style,
        variant = WxTextVariant.titleSmall;

  /// The variant text style to apply.
  final WxTextVariantBuilder? variant;

  /// Shortcut to [style.color]
  final Color? color;

  /// Shortcut to [style.backgroundColor]
  final Color? backgroundColor;

  /// Shortcut to [style.shadows]
  final List<Shadow>? shadows;

  /// Shortcut to [style.fontFamily]
  final String? fontFamily;

  /// Shortcut to [style.fontSize]
  final double? fontSize;

  /// Shortcut to [style.fontWeight]
  final FontWeight? fontWeight;

  /// Shortcut to [style.fontStyle]
  final FontStyle? fontStyle;

  /// Shortcut to [style.letterSpacing]
  final double? letterSpacing;

  /// Shortcut to [style.wordSpacing]
  final double? wordSpacing;

  /// Shortcut to [style.textBaseline]
  final TextBaseline? textBaseline;

  /// Shortcut to [style.height]
  final double? height;

  /// If non-null, the style to use for this text.
  ///
  /// If the style's "inherit" property is true, the style will be merged with
  /// the closest enclosing [DefaultTextStyle]. Otherwise, the style will
  /// replace the closest enclosing [DefaultTextStyle].
  final TextStyle? styleOverridden;

  /// Collected text style from shortcuts
  TextStyle get styleFromShortcuts => TextStyle(
        color: color,
        backgroundColor: backgroundColor,
        shadows: shadows,
        fontFamily: fontFamily,
        fontSize: fontSize,
        fontWeight: fontWeight,
        fontStyle: fontStyle,
        letterSpacing: letterSpacing,
        wordSpacing: wordSpacing,
        textBaseline: textBaseline,
        height: height,
      );

  @override
  Widget build(BuildContext context) {
    return WxTextStyler(
      style: styleOverridden,
      variant: variant,
      child: WxTextStyler(
        style: styleFromShortcuts,
        child: Builder(builder: (context) {
          return super.build(context);
        }),
      ),
    );
  }
}
